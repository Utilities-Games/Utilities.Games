@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Utilities.Games.Models

<div class="page">
    @if (Loading)
    {
        <p class="alert alert-light">Loading Layout...</p>
    }
    else
    {
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            @if (CurrentSubsite != null)
            {
                <Breadcrumb CurrentRoute="@CurrentPath" ConfigPath="@($"./Subsites/{CurrentSubsite.Slug}/breadcrumb_config.json")" />
            }
            @Body
        </div>
        <Utilities.Games.Shared.Toast.UpdatePWA UpdateAvailable="@PWAUpdateAvailable" ActionCallback="@HandleUpdateCallback"></Utilities.Games.Shared.Toast.UpdatePWA>
    }
</div>
@code{
    bool Loading { get; set; }
    bool PWAUpdateAvailable { get; set; }
    string CurrentPath { get; set; }

    List<Subsite> subsites { get; set; }

    Subsite CurrentSubsite { get; set; }

    private UpdateAvailableEventInterop UpdateAvailableInterop { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        var options = new System.Text.Json.JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        };
        subsites = await Http.GetFromJsonAsync<List<Subsite>>("./Subsites/subsites.json", options);
        Loading = false;
    }
    protected async override void OnParametersSet() {
        CurrentPath = NavigationManager.Uri.Replace(NavigationManager.BaseUri, string.Empty);
        var pathParts = CurrentPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        string currentRoot = pathParts.FirstOrDefault();
        if (!string.IsNullOrEmpty(currentRoot) && subsites?.Count > 0)
        {
            Console.WriteLine("Searching for subsite '" + currentRoot + "' in [" + string.Join(',', subsites.Select(o => o.Name).ToArray()) + "' from '" + CurrentPath + "'.");
            CurrentSubsite = subsites.FirstOrDefault(o => o.Slug.Equals(currentRoot, StringComparison.OrdinalIgnoreCase));
        } else {
            CurrentSubsite = null;
        }

        string themeClass = CurrentSubsite?.Slug?.ToLower() ?? "";
        await JSRuntime.InvokeVoidAsync("changeTheme", $"theme-{themeClass}");

        base.OnParametersSet();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/popper/popper.min.js");
            await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/bootstrap/bootstrap.min.js");

            UpdateAvailableInterop = new(JSRuntime);
            await UpdateAvailableInterop.SetupCallback(async () => await HandleUpdateAvailable());
        }
    }

    private async Task HandleUpdateAvailable() {
        Console.WriteLine("PWA Update Available");
        PWAUpdateAvailable = true;
        StateHasChanged();
    }

    void HandleUpdateCallback(bool updated) {
        PWAUpdateAvailable = !updated;
        StateHasChanged();
    }
}