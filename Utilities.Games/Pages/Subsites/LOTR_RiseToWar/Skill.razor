@page "/lotr_risetowar/skills/{name}"
@inject HttpClient Http
@layout LOTR_RiseToWar_Layout

<PageTitle>@Name - The Lord of the Rings: Rise to War&trade; - Utilities.Games</PageTitle>

@if (skill == null)
{
    <p>Loading...</p>
}
else
{
    <h3>@(skill.Name)</h3>

    @if (skill.Levels?.Length > 0)
    {
        <ul>
            @foreach (var skillLevel in skill.Levels)
            {
                <li>
                    @(skillLevel.Level))
                    @if (skillLevel.Effects?.Length > 0)
                    {
                        <ul>
                            @foreach (var skillEffect in skillLevel.Effects)
                            {
                                <li>[@(skillEffect.TargetScope)] @(skillEffect.TargetType) @(skillEffect.Amount != null ? (skillEffect.Amount > 0 ? $"+{skillEffect.Amount}" : $"-{skillEffect.Amount}") + skillEffect.Units?.ToString() : "")</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <span>No effects</span>
                    }
                </li>
            }
        </ul>
    }

    <h5>Sub-Skills</h5>
    @if (skill.SubSkills?.Length > 0)
    {
        <ul>
            @foreach (var subSkill in skill.SubSkills)
            {
                <li>@(subSkill.Name) <small>(Round @(subSkill.Round))</small></li>
            }
        </ul>
    }
    else
    {
        <p>No Sub-Skills</p>
    }
}

@code {
    [Parameter]
    public string Name { get; set; }

    private Games.Models.Subsites.LOTR_RiseToWar.Skill skill;

    protected override async Task OnInitializedAsync()
    {
        var options = new System.Text.Json.JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        };
        skill = (await Http.GetFromJsonAsync<Games.Models.Subsites.LOTR_RiseToWar.Skill[]>("Subsites/LOTR_RiseToWar/data/skills.json", options))
            .FirstOrDefault(o => o.Name == Name);
    }
}
