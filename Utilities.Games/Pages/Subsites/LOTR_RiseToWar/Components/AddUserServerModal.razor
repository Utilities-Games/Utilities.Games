@using LOTR_RiseToWar.Models.LocalStores
@using LOTR_RiseToWar.Models
@inject HttpClient Http

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">User Server</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="@Result" OnValidSubmit="@HandleValidSubmit">
                <div class="modal-body">
                    <p>Add a new server to your list</p>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group row">
                        <label for="serverNumber">Server #</label>
                        <InputNumber id="serverNumber" class="form-control" @bind-Value="Result.ServerNumber" />
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <label for="userName">Username</label>
                            <InputText id="userName" class="form-control" @bind-Value="Result.Username" />
                        </div>
                        <div class="col-6">
                            <label for="userId">User ID</label>
                            <InputNumber id="userId" class="form-control" @bind-Value="Result.UserId" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="faction">Faction</label>
                        <InputSelect id="faction" class="form-control" @bind-Value="Result.Faction">
                            @if (Factions?.Length > 0)
                            {
                                foreach (Faction faction in Factions)
                                {
                                    <option value="@(faction.Name)">@(faction.Name)</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <label for="fellowshipId">Fellowship ID</label>
                            <InputText id="fellowshipId" class="form-control" @bind-Value="Result.FellowshipId" />
                        </div>
                        <div class="col-6">
                            <label for="fellowshipName">Fellowship Name</label>
                            <InputText id="fellowshipName" class="form-control" @bind-Value="Result.FellowshipName" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    public delegate void Callback(UserServer userServer);

    [Parameter]
    public Callback OnSave { get; set; }

    private UserServer Result = new();

    private Faction[] Factions;

    private Guid Guid = Guid.NewGuid();
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;


    protected override async Task OnInitializedAsync()
    {
        var options = new System.Text.Json.JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        };
        Factions = (await Http.GetFromJsonAsync<Models.Faction[]>("Subsites/LOTR_RiseToWar/data/factions.json", options));
    }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        if (OnSave != null)
        {
            OnSave(Result);
        }
    }
}
